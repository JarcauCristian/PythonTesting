<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="9" skipped="0" tests="18" time="3.013" timestamp="2023-04-02T09:13:36.922646" hostname="ScR4PP-PC"><testcase classname="endpoints" name="test_datacapture_test_returns_200" time="0.156" /><testcase classname="endpoints" name="test_datacapture_test_returns_correct_body" time="0.149" /><testcase classname="endpoints" name="test_datacapture_get_returns_200" time="0.149" /><testcase classname="endpoints" name="test_datacapture_get_returns_correct_body" time="0.145"><failure message="AssertionError: assert False&#10; +  where False = check(Schema([{'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'convertorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}]), '[]')&#10; +    where Schema([{'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'convertorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}]) = datacapture_list_schema()">def test_datacapture_get_returns_correct_body():
        response = requests.get(url + "datacapture")
        body = response.content.decode("utf-8")
        if not check(datacapture_list_schema(), body):
            logging.error(f'The endpoint datacapture returned wrong wrong body: {body}')
&gt;       assert check(datacapture_list_schema(), body)
E       AssertionError: assert False
E        +  where False = check(Schema([{'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'convertorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}]), '[]')
E        +    where Schema([{'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'convertorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}]) = datacapture_list_schema()

endpoints.py:48: AssertionError</failure></testcase><testcase classname="endpoints" name="test_datacapture_post_returns_200" time="0.149"><failure message="assert 500 == 200">def test_datacapture_post_returns_200():
        response = requests.post(url + "datacapture", json=t_datacapture_request())
        status_code = response.status_code
        if status_code != 200:
            logging.error(f'The endpoint POST datacapture returned wrong status code: {status_code}')
&gt;       assert status_code == 200
E       assert 500 == 200

endpoints.py:56: AssertionError</failure></testcase><testcase classname="endpoints" name="test_datacapture_id_returns_200" time="0.164"><failure message="assert 404 == 200">def test_datacapture_id_returns_200():
        my_id = random.randint(0, 100)
        response = requests.get(url + "datacapture/" + str(my_id))
        status_code = response.status_code
        if status_code != 200:
            logging.error(f'The endpoint datacapture/id returned wrong status code: {status_code}')
&gt;       assert status_code == 200
E       assert 404 == 200

endpoints.py:65: AssertionError</failure></testcase><testcase classname="endpoints" name="test_datacapture_id_returns_correct_body" time="0.148"><failure message="assert False&#10; +  where False = check(Schema({'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'convertorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}), '{&quot;message&quot;: &quot;Cannot find job with id: 35&quot;}')&#10; +    where Schema({'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'convertorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}) = datacapture_schema()">def test_datacapture_id_returns_correct_body():
        my_id = random.randint(0, 100)
        response = requests.get(url + "datacapture/" + str(my_id))
        body = response.content.decode("utf-8")
        if not check(datacapture_schema(), body):
            logging.error(f'The endpoint datacapture/id returned wrong wrong body: {body}')
&gt;       assert check(datacapture_schema(), body)
E       assert False
E        +  where False = check(Schema({'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'convertorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}), '{"message": "Cannot find job with id: 35"}')
E        +    where Schema({'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'convertorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}) = datacapture_schema()

endpoints.py:74: AssertionError</failure></testcase><testcase classname="endpoints" name="test_datacapture_combo_test_returns_200" time="0.144" /><testcase classname="endpoints" name="test_datacapture_combo_test_returns_correct_body" time="0.151" /><testcase classname="endpoints" name="test_datacapture_combo_returns_200" time="0.140" /><testcase classname="endpoints" name="test_datacapture_combo_returns_correct_body" time="0.148"><failure message="AssertionError: assert False&#10; +  where False = check(Schema([{'id': And(Use(&lt;class 'str'&gt;)), 'name': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'jobs': [{'order': And(Use(&lt;class 'int'&gt;)), 'job': {'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'converterArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}}]}]), '[]')&#10; +    where Schema([{'id': And(Use(&lt;class 'str'&gt;)), 'name': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'jobs': [{'order': And(Use(&lt;class 'int'&gt;)), 'job': {'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'converterArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}}]}]) = datacapture_combo_list_schema()">def test_datacapture_combo_returns_correct_body():
        response = requests.get(url + "datacapture/combo")
        body = response.content.decode("utf-8")
        if not check(datacapture_combo_list_schema(), body):
            logging.error(f'The endpoint datacapture/combo returned wrong wrong body: {body}')
&gt;       assert check(datacapture_combo_list_schema(), body)
E       AssertionError: assert False
E        +  where False = check(Schema([{'id': And(Use(&lt;class 'str'&gt;)), 'name': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'jobs': [{'order': And(Use(&lt;class 'int'&gt;)), 'job': {'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'converterArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}}]}]), '[]')
E        +    where Schema([{'id': And(Use(&lt;class 'str'&gt;)), 'name': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'jobs': [{'order': And(Use(&lt;class 'int'&gt;)), 'job': {'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'converterArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}}]}]) = datacapture_combo_list_schema()

endpoints.py:106: AssertionError</failure></testcase><testcase classname="endpoints" name="test_datacapture_combo_post_returns_200" time="0.168"><failure message="assert 500 == 200">def test_datacapture_combo_post_returns_200():
        response = requests.post(url + "datacapture/combo", json=t_datacapture_combo_request())
        status_code = response.status_code
        if status_code != 200:
            logging.error(f'The endpoint POST datacapture/combo returned wrong status code: {status_code}')
&gt;       assert status_code == 200
E       assert 500 == 200

endpoints.py:114: AssertionError</failure></testcase><testcase classname="endpoints" name="test_datacapture_combo_id_returns_200" time="0.136"><failure message="assert 404 == 200">def test_datacapture_combo_id_returns_200():
        my_id = random.randint(0, 100)
        response = requests.get(url + "datacapture/combo" + str(my_id))
        status_code = response.status_code
        if status_code != 200:
            logging.error(f'The endpoint datacapture/combo/id returned wrong status code: {status_code}')
&gt;       assert status_code == 200
E       assert 404 == 200

endpoints.py:123: AssertionError</failure></testcase><testcase classname="endpoints" name="test_datacapture_combo_id_returns_correct_body" time="0.150"><failure message="assert False&#10; +  where False = check(Schema({'id': And(Use(&lt;class 'str'&gt;)), 'name': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'jobs': [{'order': And(Use(&lt;class 'int'&gt;)), 'job': {'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'converterArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}}]}), '{&quot;message&quot;: &quot;Cannot find job with id: combo83&quot;}')&#10; +    where Schema({'id': And(Use(&lt;class 'str'&gt;)), 'name': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'jobs': [{'order': And(Use(&lt;class 'int'&gt;)), 'job': {'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'converterArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}}]}) = datacapture_combo_schema()">def test_datacapture_combo_id_returns_correct_body():
        my_id = random.randint(0, 100)
        response = requests.get(url + "datacapture/combo" + str(my_id))
        body = response.content.decode("utf-8")
        if not check(datacapture_combo_schema(), body):
            logging.error(f'The endpoint datacapture/combo/id returned wrong wrong body: {body}')
&gt;       assert check(datacapture_combo_schema(), body)
E       assert False
E        +  where False = check(Schema({'id': And(Use(&lt;class 'str'&gt;)), 'name': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'jobs': [{'order': And(Use(&lt;class 'int'&gt;)), 'job': {'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'converterArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}}]}), '{"message": "Cannot find job with id: combo83"}')
E        +    where Schema({'id': And(Use(&lt;class 'str'&gt;)), 'name': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'jobs': [{'order': And(Use(&lt;class 'int'&gt;)), 'job': {'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'converterArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}}]}) = datacapture_combo_schema()

endpoints.py:132: AssertionError</failure></testcase><testcase classname="endpoints" name="test_datacapture_combo_schedule_test_returns_200" time="0.151" /><testcase classname="endpoints" name="test_datacapture_combo_schedule_test_returns_correct_body" time="0.166" /><testcase classname="endpoints" name="test_datacapture_combo_schedule_returns_200" time="0.139" /><testcase classname="endpoints" name="test_datacapture_combo_schedule_returns_correct_body" time="0.154"><failure message="AssertionError: assert False&#10; +  where False = check(Schema([{'schedule': {'future': {'time': And(Use(&lt;class 'int'&gt;)), 'unit': And(Use(&lt;class 'str'&gt;))}, 'periodic': {'time': And(Use(&lt;class 'int'&gt;)), 'unit': And(Use(&lt;class 'str'&gt;))}}, 'name': And(Use(&lt;class 'str'&gt;)), 'id': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'jobs': [{'order': And(Use(&lt;class 'int'&gt;)), 'job': {'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'converterArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}}], 'dateAdded': And(Use(&lt;class 'str'&gt;))}]), '[]')&#10; +    where Schema([{'schedule': {'future': {'time': And(Use(&lt;class 'int'&gt;)), 'unit': And(Use(&lt;class 'str'&gt;))}, 'periodic': {'time': And(Use(&lt;class 'int'&gt;)), 'unit': And(Use(&lt;class 'str'&gt;))}}, 'name': And(Use(&lt;class 'str'&gt;)), 'id': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'jobs': [{'order': And(Use(&lt;class 'int'&gt;)), 'job': {'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'converterArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}}], 'dateAdded': And(Use(&lt;class 'str'&gt;))}]) = datacapture_combo_schedule_list_schema()">def test_datacapture_combo_schedule_returns_correct_body():
        response = requests.get(url + "datacapture/combo/schedule")
        body = response.content.decode("utf-8")
        if not check(datacapture_combo_schedule_list_schema(), body):
            logging.error(f'The endpoint datacapture/combo/schedule returned wrong wrong body: {body}')
&gt;       assert check(datacapture_combo_schedule_list_schema(), body)
E       AssertionError: assert False
E        +  where False = check(Schema([{'schedule': {'future': {'time': And(Use(&lt;class 'int'&gt;)), 'unit': And(Use(&lt;class 'str'&gt;))}, 'periodic': {'time': And(Use(&lt;class 'int'&gt;)), 'unit': And(Use(&lt;class 'str'&gt;))}}, 'name': And(Use(&lt;class 'str'&gt;)), 'id': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'jobs': [{'order': And(Use(&lt;class 'int'&gt;)), 'job': {'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'converterArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}}], 'dateAdded': And(Use(&lt;class 'str'&gt;))}]), '[]')
E        +    where Schema([{'schedule': {'future': {'time': And(Use(&lt;class 'int'&gt;)), 'unit': And(Use(&lt;class 'str'&gt;))}, 'periodic': {'time': And(Use(&lt;class 'int'&gt;)), 'unit': And(Use(&lt;class 'str'&gt;))}}, 'name': And(Use(&lt;class 'str'&gt;)), 'id': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'jobs': [{'order': And(Use(&lt;class 'int'&gt;)), 'job': {'id': And(Use(&lt;class 'str'&gt;)), 'datasourceID': And(Use(&lt;class 'str'&gt;)), 'datasetID': And(Use(&lt;class 'str'&gt;)), 'dateAdded': And(Use(&lt;class 'str'&gt;)), 'dateFinished': And(Use(&lt;class 'str'&gt;)), 'status': And(Use(&lt;class 'str'&gt;)), 'connectorArguments': {'datePattern': And(Use(&lt;class 'str'&gt;)), 'nullString': And(Use(&lt;class 'str'&gt;))}, 'converterArguments': {'datePattern': And(Use(&lt;class 'str'&gt;))}, 'batchSize': And(Use(&lt;class 'int'&gt;))}}], 'dateAdded': And(Use(&lt;class 'str'&gt;))}]) = datacapture_combo_schedule_list_schema()

endpoints.py:164: AssertionError</failure></testcase></testsuite></testsuites>